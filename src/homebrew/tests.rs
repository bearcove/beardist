use super::*;
use log::{LevelFilter, info};
use std::time::Instant;
use tempfile::TempDir;

#[test]
fn test_generate_and_audit_formula() -> eyre::Result<()> {
    // Install log handler
    env_logger::builder().filter_level(LevelFilter::Info).init();

    info!("Starting test_generate_and_audit_formula");

    // Create a temporary directory
    let start = Instant::now();
    let tmp_dir = TempDir::new()?;
    let formula_dir = tmp_dir.path().join("Formula");
    fs_err::create_dir_all(&formula_dir)?;
    info!(
        "Created temporary directory in {}ms",
        start.elapsed().as_millis()
    );

    // Generate formula content
    let start = Instant::now();
    let homebrew_config = TapConfig {
        formulas: vec![Formula {
            repo: "testowner/foobar".to_string(),
            homepage: "https://example.com".to_string(),
            desc: "Sample generated by beardist".to_string(),
            license: "MIT".to_string(),
            bins: vec!["foobar".to_string()],
            deps: vec!["ffmpeg".to_string()],
        }],
    };
    let dry_run = true;
    info!("Generated sample config");
    let formula = homebrew_config.formulas.first().unwrap().clone();
    let client = Arc::new(Client::new());
    let github_version = "8.0.0".to_string();
    let context = HomebrewContext::new(client.clone(), formula, github_version, dry_run)?
        .expect("Failed to create HomebrewContext");

    let mac_binary = context.get_binary("https://example.com/mac")?;
    let linux_binary = context.get_binary("https://example.com/linux")?;

    let binaries = Binaries {
        linux: linux_binary,
        mac: mac_binary,
    };
    let formula_content = context.generate_homebrew_formula(binaries)?;
    info!(
        "Generated formula content in {}ms",
        start.elapsed().as_millis()
    );

    // Write formula to file
    let start = Instant::now();
    let formula_path = formula_dir.join("foobar.rb");
    fs_err::write(&formula_path, &formula_content)?;
    info!("Wrote formula to file in {}ms", start.elapsed().as_millis());

    // Show formula contents
    info!("Showing formula contents...");
    eprintln!("===============================================================");
    eprintln!("{}", formula_content);
    eprintln!("===============================================================");

    // List directory contents
    info!("Listing directory contents...");
    let ls_output = std::process::Command::new("ls")
        .args(["-lhA"])
        .current_dir(&tmp_dir)
        .output()?;
    info!(
        "ls -lhA output:\n{}",
        String::from_utf8_lossy(&ls_output.stdout)
    );

    // Show directory tree
    info!("Showing directory tree...");
    let tree_output = std::process::Command::new("tree")
        .args(["-ah"])
        .current_dir(&tmp_dir)
        .output()?;
    info!(
        "tree -ah output:\n{}",
        String::from_utf8_lossy(&tree_output.stdout)
    );

    // Run brew style on the formula file
    info!("Running brew style...");
    let start = Instant::now();
    let status = std::process::Command::new("brew")
        .arg("style")
        .arg(&formula_path)
        .status()?;
    let style_duration = start.elapsed();
    info!(
        "Brew style completed in {}ms with exit status {}",
        style_duration.as_millis(),
        status.code().unwrap_or(-1)
    );

    // Check if audit passed
    assert!(status.success(), "brew audit failed");
    info!("Brew audit passed successfully");

    // Do upload dry run
    context.update_formula()?;

    Ok(())
}
